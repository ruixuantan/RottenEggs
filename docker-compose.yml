services:
  scylla:
    image: scylladb/scylla
    container_name: rotteneggs-db
    hostname: ${ROTTENEGGS_DB_HOST}
    command: --smp=1
    ports:
      - ${ROTTENEGGS_DB_PORT}:${ROTTENEGGS_DB_PORT}
    volumes:
      - ./scylla/data:/var/lib/scylla
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 5s
      timeout: 5s
      retries: 5

  scylla-init-load:
    image: scylladb/scylla
    container_name: rotteneggs-init-load
    volumes:
      - ./scylla:/scripts
    entrypoint: ["bash", "/scripts/init.sh"]
    depends_on:
      scylla:
        condition: service_healthy

  rotteneggs:
    build: ./rotteneggs
    container_name: rotteneggs
    volumes:
      - ./rotteneggs/main.py:/app/main.py
    environment:
      - APP_HOST=${ROTTENEGGS_HOST}
      - APP_PORT=${ROTTENEGGS_PORT}
      - KEYSPACE_NAME=${ROTTENEGGS_RATER_KEYSPACE}
      - DB_HOST=${ROTTENEGGS_DB_HOST}
      - DB_PORT=${ROTTENEGGS_DB_PORT}
      - NOTIFICATION_HOST=${NOTIFICATION_HOST}
      - NOTIFICATION_PORT=${NOTIFICATION_PORT}
    ports:
      - ${ROTTENEGGS_PORT}:${ROTTENEGGS_PORT}
    command: ["fastapi", "run", "main.py", "--host", "${ROTTENEGGS_HOST}", "--port", "${ROTTENEGGS_PORT}"]
    depends_on:
      scylla:
        condition: service_healthy

  notification:
    build: ./notification
    container_name: notification
    volumes:
      - ./notification/main.py:/app/main.py
    environment:
      - APP_HOST=${NOTIFICATION_HOST}
      - APP_PORT=${NOTIFICATION_PORT}
      - KEYSPACE_NAME=${ROTTENEGGS_NOTIFICATION_KEYSPACE}
      - DB_HOST=${ROTTENEGGS_DB_HOST}
      - DB_PORT=${ROTTENEGGS_DB_PORT}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
    ports:
      - ${NOTIFICATION_PORT}:${NOTIFICATION_PORT}
    command: ["fastapi", "run", "main.py", "--host", "${NOTIFICATION_HOST}", "--port", "${NOTIFICATION_PORT}"]
    depends_on:
      scylla:
        condition: service_healthy

  zookeeper:
    image: docker.io/bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:latest
    container_name: kafka
    ports:
      - 29092:29092
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://:${KAFKA_PORT},OUTSIDE://:29092
      - KAFKA_CFG_LISTENERS=INSIDE://:${KAFKA_PORT},OUTSIDE://:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INSIDE
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  kafka-init:
    image: docker.io/bitnami/kafka:latest
    container_name: kafka-init
    environment:
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_TOPICS=${KAFKA_TOPICS}
    volumes:
      - ./kafka:/scripts
    entrypoint: ["bash", "/scripts/init.sh"]
    depends_on:
      - kafka

  documentary-analytics-notifier:
    build: ./notification_worker
    container_name: documentary-analytics-notifier
    volumes:
      - ./notification_worker/worker.py:/app/worker.py
    environment:
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
    command: ["python", "worker.py", "-g", "DocumentaryAnalyticsGroup", "-t", "DocumentaryAnalyticsTopic", "-i", "1"]
    depends_on:
      - notification

  indiefilm-recommender-notifier:
    build: ./notification_worker
    container_name: indiefilm-recommender-notifier
    volumes:
      - ./notification_worker/worker.py:/app/worker.py
    environment:
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
    command: ["python", "worker.py", "-g", "IndiefilmRecommenderGroup", "-t", "IndiefilmRecommenderTopic", "-i", "1"]
    depends_on:
      - notification

  consume-all-notifier:
    build: ./notification_worker
    container_name: consume-all-notifier
    volumes:
      - ./notification_worker/worker.py:/app/worker.py
    environment:
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
    command: ["python", "worker.py", "-g", "ConsumeAllGroup", "-t", "ConsumeAllTopic", "-i", "1"]
    depends_on:
      - notification

  dashboard:
    build: ./dashboard
    container_name: dashboard
    ports:
      - ${DASHBOARD_PORT}:${DASHBOARD_PORT}
    command: ["bun", "run", "index.js"]
